# coding: utf-8

"""
    SysML v2 API and Services

    REST/HTTP binding (PSM) for the SysML v2 standard API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sysml_v2_api_client.configuration import Configuration


class ElementVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'data': 'Element',
        'id': 'str',
        'identity': 'ElementIdentity'
    }

    attribute_map = {
        'type': '@type',
        'data': 'data',
        'id': 'id',
        'identity': 'identity'
    }

    def __init__(self, type=None, data=None, id=None, identity=None, local_vars_configuration=None):  # noqa: E501
        """ElementVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._data = None
        self._id = None
        self._identity = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if identity is not None:
            self.identity = identity

    @property
    def type(self):
        """Gets the type of this ElementVersion.  # noqa: E501


        :return: The type of this ElementVersion.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ElementVersion.


        :param type: The type of this ElementVersion.  # noqa: E501
        :type: str
        """
        allowed_values = ["ElementVersion"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def data(self):
        """Gets the data of this ElementVersion.  # noqa: E501


        :return: The data of this ElementVersion.  # noqa: E501
        :rtype: Element
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ElementVersion.


        :param data: The data of this ElementVersion.  # noqa: E501
        :type: Element
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this ElementVersion.  # noqa: E501


        :return: The id of this ElementVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElementVersion.


        :param id: The id of this ElementVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def identity(self):
        """Gets the identity of this ElementVersion.  # noqa: E501


        :return: The identity of this ElementVersion.  # noqa: E501
        :rtype: ElementIdentity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this ElementVersion.


        :param identity: The identity of this ElementVersion.  # noqa: E501
        :type: ElementIdentity
        """

        self._identity = identity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElementVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ElementVersion):
            return True

        return self.to_dict() != other.to_dict()
