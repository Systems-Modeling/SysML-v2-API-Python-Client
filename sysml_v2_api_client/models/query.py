# coding: utf-8

"""
    SysML v2 API and Services

    REST/HTTP binding (PSM) for the SysML v2 standard API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sysml_v2_api_client.configuration import Configuration


class Query(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'containing_project': 'CommitContainingProject',
        'id': 'str',
        'scope': 'list[ElementIdentity]',
        'select': 'list[str]',
        'where': 'Constraint'
    }

    attribute_map = {
        'type': '@type',
        'containing_project': 'containingProject',
        'id': 'id',
        'scope': 'scope',
        'select': 'select',
        'where': 'where'
    }

    def __init__(self, type=None, containing_project=None, id=None, scope=None, select=None, where=None, local_vars_configuration=None):  # noqa: E501
        """Query - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._containing_project = None
        self._id = None
        self._scope = None
        self._select = None
        self._where = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if containing_project is not None:
            self.containing_project = containing_project
        if id is not None:
            self.id = id
        if scope is not None:
            self.scope = scope
        if select is not None:
            self.select = select
        if where is not None:
            self.where = where

    @property
    def type(self):
        """Gets the type of this Query.  # noqa: E501


        :return: The type of this Query.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Query.


        :param type: The type of this Query.  # noqa: E501
        :type: str
        """
        allowed_values = ["Query"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def containing_project(self):
        """Gets the containing_project of this Query.  # noqa: E501


        :return: The containing_project of this Query.  # noqa: E501
        :rtype: CommitContainingProject
        """
        return self._containing_project

    @containing_project.setter
    def containing_project(self, containing_project):
        """Sets the containing_project of this Query.


        :param containing_project: The containing_project of this Query.  # noqa: E501
        :type: CommitContainingProject
        """

        self._containing_project = containing_project

    @property
    def id(self):
        """Gets the id of this Query.  # noqa: E501


        :return: The id of this Query.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Query.


        :param id: The id of this Query.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def scope(self):
        """Gets the scope of this Query.  # noqa: E501


        :return: The scope of this Query.  # noqa: E501
        :rtype: list[ElementIdentity]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Query.


        :param scope: The scope of this Query.  # noqa: E501
        :type: list[ElementIdentity]
        """

        self._scope = scope

    @property
    def select(self):
        """Gets the select of this Query.  # noqa: E501


        :return: The select of this Query.  # noqa: E501
        :rtype: list[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this Query.


        :param select: The select of this Query.  # noqa: E501
        :type: list[str]
        """

        self._select = select

    @property
    def where(self):
        """Gets the where of this Query.  # noqa: E501


        :return: The where of this Query.  # noqa: E501
        :rtype: Constraint
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this Query.


        :param where: The where of this Query.  # noqa: E501
        :type: Constraint
        """

        self._where = where

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Query):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Query):
            return True

        return self.to_dict() != other.to_dict()
